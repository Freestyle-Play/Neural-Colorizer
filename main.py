# -*- coding: utf-8 -*-
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
import socket, os, json, threading
#from PyQt5.QtGui import QIcon
from ui import Ui_MainWindow


class MainWindow(QtWidgets.QMainWindow):
    """docstring for MainWindow"""
    finished = QtCore.pyqtSignal()
    def __init__(self):
        super(MainWindow, self).__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        #self.ui.btnChoiceImg.setToolTip("–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–Ω–¥–µ—Ä —Ñ–∞–∫—Ç–æ—Ä? - —Ä–µ–Ω–¥–µ—Ä —Ñ–∞–∫—Ç–æ—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ü–≤–µ—Ç–Ω–∞—è —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ë–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ, –∞ —Ü–≤–µ—Ç–∞ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –±–æ–ª–µ–µ —è—Ä–∫–∏–º–∏. –í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç –æ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏. –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç–æ –ª—É—á—à–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ —Ü–≤–µ—Ç–∞ –º–æ–≥—É—Ç —Å–ª–µ–≥–∫–∞ —Ä–∞–∑–º—ã–≤–∞—Ç—å—Å—è.")
        self.dragPos = QtCore.QPoint()
        self.ui.close.clicked.connect(self.close)
        self.ui.roll.clicked.connect(self.minimize)
        self.ui.helpbtn.clicked.connect(self.show_info_messagebox)
        self.ui.btnChoiceImg.clicked.connect(self.choiceFile)
        self.ui.btnChoiceImg_2.clicked.connect(self.choicePath)
        self.ui.btnSend.setVisible(False)
        self.ui.btnSend.clicked.connect(self.sendFileToServer)
        self.FileName = None
        self.SavePath = ''
        self.finished.connect(self.on_finished, QtCore.Qt.QueuedConnection)
        self.cfg = None


    def minimize(self):
        self.showMinimized()

    def choicePath(self):
        self.SavePath = QFileDialog.getExistingDirectory(self, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'C:\\') + "\\"
        print("SavePath =",self.SavePath)

    def choiceFile(self):
        self.FileName = QFileDialog.getOpenFileName(self, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', 'c:\\',"Image files (*.jpg *.png)")
        print("FilePath =",self.FileName)
        #print("path =",self.FileName[0][-3:])

        if self.FileName[0][-3:] == "png" or self.FileName[0][-3:] == "jpg":
            if self.SavePath == '':
                self.SavePath = QFileDialog.getExistingDirectory(self, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'C:\\') + "\\"
                if self.SavePath =='\\':
                    self.SavePath = ''
                print("SavePath =",self.SavePath)
            self.ui.ImageBox.setPixmap(QtGui.QPixmap(self.FileName[0]).scaled(340, 330, QtCore.Qt.KeepAspectRatio))
            self.ui.btnSend.setVisible(True)
            msg = QMessageBox()     
            msg.setIcon(QMessageBox.Information) 
            msg.setWindowTitle(" ")
            msg.setText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!")
            # declaring buttons on Message Box
            msg.setStandardButtons(QMessageBox.Ok)
            # start the app
            retval = msg.exec_()

        else:
            self.ui.ImageBox.setPixmap(QtGui.QPixmap())
            self.ui.btnSend.setVisible(False)

            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)   
            msg.setWindowTitle("Error:")
            msg.setText("—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .jpg –∏–ª–∏ .png")
            # declaring buttons on Message Box
            msg.setStandardButtons(QMessageBox.Ok)
              
            # start the app
            retval = msg.exec_()


    def show_info_messagebox(self):
        msg = QMessageBox()     
        msg.setIcon(QMessageBox.Information) 
        msg.setWindowTitle(" ")
        msg.setText("–ß—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ–Ω–¥–µ—Ä —Ñ–∞–∫—Ç–æ—Ä? - —Ä–µ–Ω–¥–µ—Ä —Ñ–∞–∫—Ç–æ—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ü–≤–µ—Ç–Ω–∞—è —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ë–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ, –∞ —Ü–≤–µ—Ç–∞ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –±–æ–ª–µ–µ —è—Ä–∫–∏–º–∏. –í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç –æ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏. –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç–æ –ª—É—á—à–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ —Ü–≤–µ—Ç–∞ –º–æ–≥—É—Ç —Å–ª–µ–≥–∫–∞ —Ä–∞–∑–º—ã–≤–∞—Ç—å—Å—è.\n\nArt/Photo:\n        Art - –ø—Ä–µ—Å–µ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã–π –¥–ª—è —Ä–∏—Å—É–Ω–∫–æ–≤ 2–¥\n       Photo - –ø—Ä–µ—Å–µ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")          
        # declaring buttons on Message Box
        msg.setStandardButtons(QMessageBox.Ok)
        # start the app
        retval = msg.exec_()

    def on_finished(self):
        self.ui.msg.setText(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def RecvFile(self, s, cfg):
        buffer = b''
        EndSym = b"_*<end>*_"
        while True:
            data = s.recv(1024 * 1024)

            if data == b"":
                disconnectClients(client)
                break

            raw_data = buffer + data
            if raw_data.find(EndSym) != -1: # –≤—ã—Ä–µ–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞
                endPos = raw_data.find(EndSym) + len(EndSym) # "...{}_*end*_"
                cutted = raw_data[:endPos] # –≤—ã—Ä–µ–∑–∞–µ–º
                with open(f"{self.SavePath}colored_{cfg['name']}", "wb") as file:
                    file.write(cutted)
                print(fr"{self.SavePath}colored_{cfg['name']}")
                self.ui.ImageBox_2.setPixmap(QtGui.QPixmap(fr"{self.SavePath}colored_{cfg['name']}").scaled(340, 330, QtCore.Qt.KeepAspectRatio))
                print("Sock close")
                self.finished.emit()
                break
                
            else:
                buffer = raw_data
                
    def sendFileToServer(self):
        try:
            HOST = "127.0.0.1"  # The server's hostname or IP address
            PORT = 65432  # The port used by the server
            EndSym = "_*<end>*_"
            MesSym = "_*<mes>*_"
            ByteEndSym = b"_*<endSending>*_"    

            name = self.FileName[0].split("/")[-1]
            renderF = self.ui.comboBoxF.currentText()
            typeImg = self.ui.comboBoxType.currentText()
            if renderF == "Lowüèû":
                renderF = 10
            if renderF == "MediumüåÖ":
                renderF = 25
            if renderF == "HightüåÑ":
                renderF = 40

            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((HOST, PORT))
            s.sendall(b'im client')
            cfg = {"path":self.FileName[0], "name":name, "size":os.path.getsize(self.FileName[0]), "render_factor":renderF, "type":typeImg}
            self.cfg = cfg
            data = s.recv(1024)
            if data != None and len(data) >= 1: print(f"Received {data}")
            else: return

            with open(cfg["path"], "rb") as f:
                data = f.read()

            msg = f"{MesSym}{json.dumps(cfg)}{EndSym}"
            print(msg)
            print("–æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            self.ui.msg.setText("–æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä")

            s.sendall(bytes(msg, encoding='utf-8'))
            s.sendall(data + ByteEndSym)
            print("–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
            self.ui.msg.setText("–æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
            '''
            msg = QMessageBox()     
            msg.setIcon(QMessageBox.Information) 
            msg.setWindowTitle(" ")
            msg.setText("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å! –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            # declaring buttons on Message Box
            msg.setStandardButtons(QMessageBox.Ok)
            # start the app
            retval = msg.exec_()
            '''
            self.ui.msg.setText("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å! –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")

            t1 = threading.Thread(target=self.RecvFile, args=(s, cfg))
            t1.deamon = True
            t1.start()
        except Exception as e:
            msg = QMessageBox()     
            msg.setIcon(QMessageBox.Critical) 
            msg.setWindowTitle(" ")
            msg.setText(f"{e}")          
            # declaring buttons on Message Box
            msg.setStandardButtons(QMessageBox.Ok)
            # start the app
            retval = msg.exec_()

        
    

    def mousePressEvent(self, event):
        self.dragPos = event.globalPos()
        
    def mouseMoveEvent(self, event):
        if event.buttons() == QtCore.Qt.LeftButton:
            self.move(self.pos() + event.globalPos() - self.dragPos)
            self.dragPos = event.globalPos()
            event.accept()


app = QtWidgets.QApplication([])
application = MainWindow()
application.show()

sys.exit(app.exec())